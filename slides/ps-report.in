<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<title>Writing reports with PostScript::Report</title>
<!-- metadata -->
<meta name="generator" content="S5" />
<meta name="version" content="S5 1.1" />
<meta name="presdate" content="20100621" />
<meta name="author" content="Christopher J. Madsen" />
<meta name="company" content="" />
<!-- configuration parameters -->
<meta name="defaultView" content="slideshow" />
<meta name="controlVis" content="hidden" />
<!-- style sheet links -->
<link rel="stylesheet" href="ui/default/slides.css" type="text/css" media="projection" id="slideProj" />
<link rel="stylesheet" href="ui/default/outline.css" type="text/css" media="screen" id="outlineStyle" />
<link rel="stylesheet" href="ui/default/print.css" type="text/css" media="print" id="slidePrint" />
<link rel="stylesheet" href="ui/default/opera.css" type="text/css" media="projection" id="operaFix" />
<!-- S5 JS -->
<script src="ui/default/slides.js" type="text/javascript"></script>
</head>
<body>

<div class="layout">
<div id="controls"><!-- DO NOT EDIT --></div>
<div id="currentSlide"><!-- DO NOT EDIT --></div>
<div id="header"></div>
<div id="footer">
<h1>YAPC::NA 2010 / June 21, 2010</h1>
<h2>Writing reports with PostScript::Report</h2>
</div>

</div>


<div class="presentation">

<div class="slide">
<h1>Writing reports with PostScript::Report</h1>
<h3>Christopher J. Madsen</h3>
<!-- <h4>[affiliation of presenter]</h4> -->
</div>


<div class="slide">
<h1>An example report</h1>
<img src="pix/multiline_header.png" alt="" class="centeredImg" />
</div>

<div class="slide">
<h1>PostScript::Report is still young</h1>
<img src="pix/youngreport.jpg" alt="" class="centeredImg" />
<p align="center">But already useful</p>
</div>

<div class="slide">
<h1>Available Components</h1>
<table width="100%">
<col span="2" width="1*" />
<tr><td>
<p>Components:</p>
<ul>
<li>Checkbox</li>
<li>Field</li>
<li>FieldTL</li>
<li>Image</li>
<li>LinkField</li>
<li>Spacer</li>
</ul>
</td>
<td>
<p>Containers:</p>
<ul>
<li>HBox</li>
<li>VBox</li>
</ul>
</td></tr></table>
</div>

<div class="slide">
<h1>Report Sections: Report Header</h1>
<img src="pix/report_header.png" alt="" />
</div>

<div class="slide">
<h1>Report Sections: Page Header</h1>
<img src="pix/page_header.png" alt="" />
</div>

<div class="slide">
<h1>Report Sections: Detail</h1>
<img src="pix/detail.png" alt="" />
</div>

<div class="slide">
<h1>Report Sections: Page Footer</h1>
<img src="pix/page_footer.png" alt="" />
</div>

<div class="slide">
<h1>Report Sections: Report Footer</h1>
<img src="pix/report_footer.png" alt="" />
</div>

<div class="slide">
<h1>A simple report description</h1>
<code src="../hello_world.pl" section="report_desc" />
</div>

<div class="slide">
<h1>A simple report description with data</h1>
<code src="../hello_world.pl" section="rows" />
</div>

<div class="slide">
<h1>Running the report</h1>
<code src="../hello_world.pl" section="run" />
<p>And the result is:</p>
<img src="pix/hello_world.png" alt="" class="centeredImg" />
</div>

<div class="slide">
<h1>Passing data to the report</h1>
<p><tt>run</tt> actually takes two parameters:</p>
<code src="../snippets.pl" section="data" />
<p>Both parameters are optional.</p>
</div>

<div class="slide">
<h1>Component values</h1>
<p>Most Components have a <tt>value</tt> attribute.
This&nbsp;can&nbsp;be&nbsp;1&nbsp;of&nbsp;3&nbsp;things:</p>

<ul class="incremental">
<li>a non-negative integer
<p>The 0-based column from the current row.</p></li>
<li>a string
<p>A key in the <tt class="PLsymbol">%data</tt> hash passed to <tt>run</tt>.
</p>
</li>
<li>an object that does PostScript::Report::Role::Value
<ul>
<li>Constant &mdash; a constant</li>
<li>Page &mdash; a page number expression</li>
</ul></li>
</ul>
</div>

<div class="slide">
<h1>Component styles</h1>
<p>Components have a number of attributes that control how they are displayed, for example:</p>

<pre>   align        border   height
   background   font     width</pre>

<p>These attributes can be inherited much like CSS styles are in HTML.
(Thanks to Jesse Luehrs, who explained how I could write
MooseX::AttributeTree to do that.)</p>
</div>

<div class="slide">
<h1>Back to the simple report</h1>
<code src="../hello_world.pl" section="rows" />
<img src="pix/hello_world.png" alt="" class="centeredImg" />
</div>

<div class="slide">
<h1>A simple report dump</h1>
<p><tt><span class="PLsymbol">$rpt</span>-&gt;dump</tt> prints
a description for debugging purposes:</p>
<pre>
align     : left    padding_bottom: 4
border    : 1       padding_side  : 3
line_width: 0.5     row_height    : 15


page_header:                      detail:
 PSR::HBox:                        PSR::HBox:
  children:                         children:
   PSR::Field:                       PSR::Field:
    value : PSR::Value::Constant      value     : 0
     value : Line
    width : 25                        width     : 25
   PSR::Field:                       PSR::Field:
    value : PSR::Value::Constant      value     : 1
     value : Text
    width : 443                       width     : 443
</pre>
</div>

<div class="slide">
<h1>Font specifications</h1>
<p>You must declare all fonts used at the report level:</p>
<code src="../multiline_header.pl" section="font_desc" />
<p>Then refer to them by the names you picked:</p>
<code src="../multiline_header.pl" section="font_use" />
</div>

<div class="slide">
<h1>Colors</h1>
<p>There are 3 ways to specify a color:</p>
<ul>
<li>a number in the range 0 to 1<br/>(0 = black, 1 = white)</li>
<li>HTML-style hex triplet form<br/>(<tt>'#FF0'</tt> or <tt>'#FFFF00'</tt> for yellow)</li>
<li>an arrayref of three numbers <tt>[&nbsp;Red,&nbsp;Green,&nbsp;Blue&nbsp;]</tt><br/>(where each number is in the range 0 to 1)</li>
</ul>
</div>

<div class="slide">
<h1>Zebra striping</h1>
<p>For zebra striping, add <tt>stripe</tt> or <tt>stripe_page</tt> to
your report description.  This is an an arrayref of background colors
for the detail section to cycle through.</p>
<p>If you use <tt>stripe_page</tt>, the pattern restarts on each page
of the report.</p>
<p>For more complex striping, you can set the report&rsquo;s
<tt>detail_background</tt> attribute directly.  This coderef is called
each time the detail section is printed, and returns the background
color to use.</p>
</div>

<div class="slide">
<h1>Alternate output formats</h1>
<p>You can use the PostScript::Convert module to process the report
through Ghostscript to generate a PDF file or PNG images.</p>
<code src="../snippets.pl" section="pdf" />
<p>I used that to make these slides:</p>
<code src="../hello_world.pl" section="slide" />
</div>

<div class="slide">
<h1>Q &amp; A</h1>
<img src="pix/questions.jpg" alt="" class="centeredImg" />
<p align="center">Questions?</p>
</div>

<div class="slide">
<h1>Goodbye</h1>
<p>Thanks for coming!</p>
<p>You can find these slides at:<br/>&nbsp;&nbsp;&nbsp;
<a href="http://www.cjmweb.net/perl/yapc2010/">http://www.cjmweb.net/perl/yapc2010/</a>
</p>
<p>Or, if you want to see how I made these slides:<br/>&nbsp;&nbsp;&nbsp;
<a href="http://github.com/madsen/yapc2010-postscript-report">http://github.com/madsen/yapc2010-postscript-report</a>
</p>
<p>I&rsquo;d also like to thank Micro Technology Services, Inc.  (<a
href="http://www.mitsi.com">www.mitsi.com</a>), who sponsored
development of PostScript::Report, and fREW Schmidt, who recommended me
for the job.  It wouldn&rsquo;t have happened without them.</p>

</div>

</div>

</body>
</html>

<!-- Local Variables: -->
<!-- mode: xml -->
<!-- compile-command: "../build_slides.pl ps-report.in index.html" -->
<!-- End: -->
